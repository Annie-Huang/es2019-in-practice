https://egghead.io/courses/javascript-es2019-in-practice

OMG, i cannot believe this, using node version 10 does not work.
After I ugprade to node version 13, the website works.
The tutorial said use node version 12 at least...

Most of the functions does not work with my Chrome 78.
Not sure why...
After I reverse flatmap to the original version and then I got problem wtih flat.
This tells me there is either a problem with this repo, or there is problem with my chrome in window...


I am getting "this.records.flatMap is not a function" on Sites.vue:45:
But Chrome 78 is already supporting flatmap according to caniuse.
Not sure why 'npm run dev' not working...



Chapter 2: Optional Catch Bindings
=========================================
In In index.vue:

function parseRecords(maybeJSON) {
  try {
    return JSON.parse(maybeJSON)
  } catch {
    console.log('could not parse:' + maybeJSON);
    throw new Error('unable to parse' + maybeJSON);
  }
}

and catch doesn't have to put a (e) if you don't use error in your body.

Chapter 4: Flatten an Array
=========================================
In Scores.vue, line 58
  const avg = average(record.scores.flat(2))



Chapter 5: Trim the End of a String
=========================================
In Scores.vue, line 63

    teachers: record.teachers
      .split(',')
      .map(teacher => teacher.trimEnd())
      .join(','),


Chapter 6: FlatMap array.
=========================================
In Sites.vue, line 40

      // const counts = []
      // this.records.forEach(record => {
      //     counts.push(record.am, record.pm);
      // });
      const counts = this.records.flatMap(record => [record.am, record.pm])

FlatMap, just flatmap one level.


Chapter 7: FlatMap to Map and Filter an Array
===============================================
FlatMap can be used as map + filter together.
In Sites.vue, line 56

      // const counts = []
      // this.records.forEach(record => {
      //   if (this.id === record.id) {
      //     counts.push(record.am, record.pm)
      //   }
      // });
      const counts = this.records.flatMap(record => {
        return this.id === record.id ? [record.am, record.pm] : []
      })

Chapter 8: Symbols: Collision-free String Constants
===============================================
In Score.vue, line 40

// console(Symbol('A') === Symbol('A')); // return false;
// console('A' === 'A'); // return true;

And use description to get the string value;
grades.a.description

Chapter 9: Create an Object from a Map or key-value Pairs
===============================================
In Score.vue, line 121
      // const json = {};
      // for(const [key, val] of this.recordsMap.entries()) {
      //     json[key] = val;
      // }
      // return JSON.stringify(json, null, 2)

      return JSON.stringify(Object.fromEntries(this.recordsMap), null, 2)
